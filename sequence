def longest_subsequence(string1, string2):
    def M(i,j, grid): # M(i,j) makes the matrix
        if i != 0 and j != 0:
            if string1[i] == string2[j]:
                if grid[j][i-1] == grid[j-1][i]:
                    return grid[j-1][i] + 1
                else:
                    return max(grid[j][i-1], grid[j-1][i])
            else:
                return max(grid[j][i-1], grid[j-1][i])
        elif i == 0 and j == 0:
            if string1[i] == string2[j]:
                return 1
            else:
                return 0
        else:
            if string1[i] == string2[j]:
                return 1
            else: 
                if i == 0:
                    return grid[j-1][i]
                else:
                    return grid[j][i-1]
    matrix = []
    for uneeded in range(0, len(string2)):
        matrix.append([])
    for j in range(0, len(string2)):
        for i in range(0, len(string1)):
            matrix[j].append(M(i,j,matrix))
        print matrix[j]
    sequence = ''
    while j > 0 and i > 0:
        if matrix[j-1][i] == matrix[j][i-1]:
            if matrix[j-1][i-1] != matrix[j][i]:
                sequence = sequence + string1[i]
            i = i - 1
            j = j - 1
        elif matrix[j-1][i] > matrix[j][i-1]:
            j = j - 1
        elif matrix[j-1][i] < matrix[j][i-1]:
            i = i - 1
    if j == 0:
        while i > 0:
            if matrix[j][i] > matrix[j][i-1]:
                sequence = sequence + string1[i]
            i = i - 1
    elif i == 0:
        while j > 0:
            if matrix[j][i] > matrix[j-1][i]:
                sequence = sequence + string2[j]
            j = j - 1
    if matrix[0][0] == 1:
        sequence = sequence + string1[0]
    sequence = sequence[::-1]
    return sequence
 
 
def time_execution(code):
    import time
    start = time.clock()
    result = eval(code)
    run_time = time.clock() - start
    print result
    return str(run_time) + ' seconds'
